# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout current branch
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install nodejs packages
      run: npm install --silent

    - name: Run sequelize module to create database and migration
      run: |
        npx sequelize db:create
        npx sequelize db:migrate
      env:
        NODE_ENV: test
        DB_TEST_USERNAME: ${{ vars.POSTGRES_USER }}
        DB_TEST_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        DB_TEST_HOST: ${{ vars.POSTGRES_HOST }}
        DB_TEST_NAME: ${{ vars.POSTGRES_DB }}

    - name: Run integration test
      run: npm run test
      env:
        DB_TEST_USERNAME: ${{ vars.POSTGRES_USER }}
        DB_TEST_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        DB_TEST_HOST: ${{ vars.POSTGRES_HOST }}
        DB_TEST_NAME: ${{ vars.POSTGRES_DB }}
        CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET }}

    # - name: Store the artifact
    #   uses: actions/upload-artifact@v3.1.3
    #   with:
    #     name: binar-artifact
    #     path: .
    #     retention-days: 1


  deploy-vercel:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}


  # this is the deployment sample for VPS or compute engine instance
  deploy-to-vps:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      # - name: Use current build artifact
      #   uses: actions/download-artifact@v3.1.3
      #   with:
      #     name: binar-artifact

      - name: Checkout current branch
        uses: actions/checkout@v2

      - name: Prepare .env file
        run: |
          touch .env #bikin file .env ke current direcotyr
          echo "DB_PROD_USERNAME=${{ secrets.DB_PROD_USERNAME }}" >> .env #menuliskan env beserta isinya, lalu di append ke file .env
          echo "DB_PROD_PASSWORD=${{ secrets.DB_PROD_PASSWORD }}" >> .env
          echo "DB_PROD_NAME=${{ secrets.DB_PROD_NAME }}" >> .env
          echo "DB_PROD_HOST=${{ secrets.DB_PROD_HOST }}" >> .env
          echo "DB_PROD_PORT=${{ secrets.DB_PROD_PORT }}" >> .env
          echo "DB_PROD_DIALECT=${{ secrets.DB_PROD_DIALECT }}" >> .env
          echo "DB_PROD_DIALECT=${{ secrets.DB_PROD_DIALECT }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET }}" >> .env
          echo "CLOUDINARY_URL=${{ secrets.CLOUDINARY_URL }}" >> .env
          echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
          echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env

      - name: Upload to VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSHHOST }}
          username: ${{ secrets.SSHUSER }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.SSHPORT }}
          source: '.'
          target: ./BingleShop-Team1/

      - name: restart pm2 services
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSHHOST }}
          username: ${{ secrets.SSHUSER }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.SSHPORT }}
          script: |
            chmod 700 -R ./BingleShop-Team1/
            npm install --silent
            pm2 restart binar-backend